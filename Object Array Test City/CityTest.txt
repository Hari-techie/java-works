import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;

public class CityTest {
    //static ArrayList<City> cityList = new ArrayList<City>();
    static City cities[] = new City[101];
    public static void main(String[] args) throws FileNotFoundException, IOException {
        loadCities();
       // printCities();
       // uniqueCities();
       // uniqueCityCapital();
       //lessPopulatedCity();
       //orderCitiesByPopulation();
       searchMyCity("Mumbai");
       // countryWiseCityCount("India");
       // queriesOnCities();
    }

    public static void searchMyCity(String cityVal)
    {
        for(City c : cities)
        {
            if(c.getCity().replaceAll("\"", "").equalsIgnoreCase(cityVal))
            {
                System.out.println(c);
                break;
            }
        }
    }

    public static void orderCitiesByPopulation()
    {
        City citiesClone[] = cities.clone();
        Arrays.sort(citiesClone,new CityPopulationComparator());
        for(City c : citiesClone)
        {
            System.out.println(c);
        }
    }

    public static void lessPopulatedCity()
    {
        City citiesClone[] = cities.clone();
        Arrays.sort(citiesClone,new CityPopulationComparator());
        System.out.println("Less populated city is "+citiesClone[0].getCity());
    }

    public static void uniqueCityCapital()
    {
        City citiesClone[] = cities.clone();
        int count = 0, uniqueCityCount = 0;
        System.out.println("------------Uniques city capital---------------");
        for(int i = 0;i < citiesClone.length-1;i++)
        {
            count = 1;
            for(int j = i+1;j < citiesClone.length;j++)
            {
                if(citiesClone[i]!=null && citiesClone[j]!=null &&  citiesClone[i].getCapital().equalsIgnoreCase(citiesClone[j].getCapital()))
                {
                    count++;
                    citiesClone[j] = null;
                }
            }
            if(citiesClone[i] != null &&  count == 1)
            {
                uniqueCityCount++;
                System.out.println(citiesClone[i].getCity());
            }
        }
        System.out.println("----------Unique city capital count ------------\n"+uniqueCityCount);        
    }

    public static void countryWiseCityCount(String specificCountry)
    {
        System.out.println("-----------Country wise unique city count----------------");
        City citiesClone[] = cities.clone();
        int i,j,count = 0, n = citiesClone.length,unique = 0; 
        for(i=0;i<n-1;i++)
        {
            if(citiesClone[i]!=null && citiesClone[i].getCountry().equalsIgnoreCase(specificCountry))
            {
                count = 1;
                for(j=i+1;j<n;j++)
                {
                    if(citiesClone[j]!=null && citiesClone[j].getCountry().equalsIgnoreCase(specificCountry) &&
                     citiesClone[i].getCity().equalsIgnoreCase(citiesClone[j].getCity()))
                     {
                        count++;
                        citiesClone[j] = null;
                     }
                }
                if(citiesClone[i]!= null && count==1)
                {
                    System.out.println(citiesClone[i].getCity());
                    unique++;
                }
            }
        }
        System.out.println("count is "+unique);
    }

    public static void uniqueCities()
    {
        City citiesClone[] = cities.clone();
        int count = 0, uniqueCityCount = 0;
        System.out.println("------------Uniques cities---------------");
        for(int i = 0;i < citiesClone.length-1;i++)
        {
            count = 1;
            for(int j = i+1;j < citiesClone.length;j++)
            {
                if(citiesClone[i].getCity().equalsIgnoreCase(citiesClone[j].getCapital()))
                {
                    count++;
                    citiesClone[j] = null;
                }
            }
            if(citiesClone[i] != null &&  count == 1)
            {
                uniqueCityCount++;
                System.out.println(citiesClone[i].getCity());
            }
        }
        System.out.println("----------Unique city count ------------\n"+uniqueCityCount);
    }

    public static void loadCities() throws FileNotFoundException, IOException {
        String fileName = "worldcities.csv";
        int k = 0;
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                City city = new City(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7],
                        parts[8], parts[9], parts[10]);
                cities[k++] = city;
                //cityList.add(city);
            }
        }
    }

    public static void printCities() {
        for(City city:cities)
        {
            System.out.println(city);
        }
    }

    public static void queriesOnCities() {
        // print unique cities
        System.out.println("Print unique cities");
        for (City city : cities) {
            System.out.println(city.getCity());
        }

        System.out.println("************************************************");

    }
}

class CityPopulationComparator implements Comparator<City> 
{

    @Override
    public int compare(City o1, City o2) {
        // TODO Auto-generated method stub
        return o1.getPopulation().compareToIgnoreCase(o2.getPopulation());
    }
    
}